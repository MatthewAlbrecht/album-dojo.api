const { GraphQLSchema, GraphQLObjectType } = require('graphql')

const {
  achievementQuery,
  actionQuery,
  albumGenreQuery,
  albumQuery,
  genreQuery,
  listQuery,
  listUserAlbumQuery,
  permissionQuery,
  rolePermissionQuery,
  roleQuery,
  userAchievementQuery,
  userActionQuery,
  userAlbumQuery,
  userQuery,
} = require('./queries')

const {
  createAchievement,
  createAction,
  createAlbum,
  createAlbumById,
  createAlbumGenre,
  createAlbumsByPlaylist,
  createGenre,
  createList,
  createListUserAlbum,
  createPermission,
  createRole,
  createRolePermission,
  createUser,
  createUserAchievement,
  createUserAction,
  createUserAlbum,
  deleteAchievement,
  deleteAction,
  deleteAlbum,
  deleteAlbumGenre,
  deleteGenre,
  deleteList,
  deleteListUserAlbum,
  deletePermission,
  deleteRole,
  deleteRolePermission,
  deleteUser,
  deleteUserAchievement,
  deleteUserAction,
  deleteUserAlbum,
  loginUser,
  updateAchievement,
  updateAction,
  updateAlbum,
  updateAlbumGenre,
  updateGenre,
  updateList,
  updateListUserAlbum,
  updatePermission,
  updateRole,
  updateUser,
  updateUserAlbum,
} = require('./mutations')

const RootQuery = new GraphQLObjectType({
  name: 'rootQuery',
  description:
    'This is the root query which holds all possible READ entrypoints for the GraphQL API',
  fields: () => ({
    achievement: achievementQuery,
    action: actionQuery,
    album: albumQuery,
    albumGenre: albumGenreQuery,
    genre: genreQuery,
    list: listQuery,
    listUserAlbum: listUserAlbumQuery,
    permission: permissionQuery,
    role: roleQuery,
    rolePermission: rolePermissionQuery,
    user: userQuery,
    userAchievement: userAchievementQuery,
    userAction: userActionQuery,
    userAlbum: userAlbumQuery,
  }),
})

const RootMutation = new GraphQLObjectType({
  name: 'rootMutation',
  description:
    'This is the root mutation which holds all possible WRITE entrypoints for the GraphQL API',
  fields: () => ({
    createAchievement,
    createAction,
    createAlbum,
    createAlbumById,
    createAlbumGenre,
    createAlbumsByPlaylist,
    createGenre,
    createList,
    createListUserAlbum,
    createPermission,
    createRole,
    createRolePermission,
    createUser,
    createUserAchievement,
    createUserAction,
    createUserAlbum,
    deleteAchievement,
    deleteAction,
    deleteAlbum,
    deleteAlbumGenre,
    deleteGenre,
    deleteList,
    deleteListUserAlbum,
    deletePermission,
    deleteRole,
    deleteRolePermission,
    deleteUser,
    deleteUserAchievement,
    deleteUserAction,
    deleteUserAlbum,
    loginUser,
    updateAchievement,
    updateAction,
    updateAlbum,
    updateAlbumGenre,
    updateGenre,
    updateList,
    updateListUserAlbum,
    updatePermission,
    updateRole,
    updateUser,
    updateUserAlbum,
  }),
})

const schema = new GraphQLSchema({
  query: RootQuery,
  mutation: RootMutation,
})

module.exports = { schema }
